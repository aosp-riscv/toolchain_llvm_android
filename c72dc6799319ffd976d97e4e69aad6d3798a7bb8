{
  "comments": [
    {
      "key": {
        "uuid": "ddd961f4_23adab6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T06:05:08Z",
      "side": 1,
      "message": "This change looks great so far.  Thanks for working on this.  Being able to use win_sdk would be a great capability for us.\n\n[partial review comments... will review the remainder of this CL tomorrow]",
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff92f4fc_3d4df261",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 87,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T06:05:08Z",
      "side": 1,
      "message": "Would it be clear to have self.env() as the final environment used for the build, i.e. do the merge here?\n\nWe can use a different function, say builder_env(), for subclasses to overload.",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 87,
        "endChar": 11
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0297eccb_9e65e9ac",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 87,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff92f4fc_3d4df261",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 87,
        "endChar": 11
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4fce0da6_bfcc2fe4",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 234,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T06:05:08Z",
      "side": 1,
      "message": "Avoid this repeated text by extracting it to a separate function, say cc(), in the Builder base class.\n\nIf you want to make it a bit more modular, we can have the functions in configs.py just return the tool name (clang or clang-cl) and have Builder.cc() construct the path in the toolchain.  So configs.py don\u0027t need to depend on toolchains.py.",
      "range": {
        "startLine": 234,
        "startChar": 36,
        "endLine": 234,
        "endChar": 79
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb1accff_a00236a7",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 234,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Done\n\nReturning tool name makes sense... But that way we have to hard code \"clang\" or \"clang-cl\" in config object. We are extremely unlikely to have a different compiler though... Let me think more about this.",
      "parentUuid": "4fce0da6_bfcc2fe4",
      "range": {
        "startLine": 234,
        "startChar": 36,
        "endLine": 234,
        "endChar": 79
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56dde882_65716826",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 271,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T06:05:08Z",
      "side": 1,
      "message": "Shall we always set the linker?",
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14d0b46b_44855a25",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 271,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T16:31:24Z",
      "side": 1,
      "message": "I have the opposite question now - why do we need to set the linker separately here?  For MSVCConfig\u0027s cflags, we pass \u0027-fuse-ld\u003dlld\u0027, so it seems clang-cl can act as the driver to invoke the linker.",
      "parentUuid": "56dde882_65716826",
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c1456c6_c53cec5e",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 271,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "At config time cmake uses clang to link. That\u0027s why we need -fuse-ld\u003dlld.\n\nBut at build time it uses `link.exe` directly if linker is not set. I\u0027m not sure whether this is specific to llvm or a general cmake behavior...\n\nI added linker to more Config objects. As long as lld is used, CMAKE_LINKER will be set.",
      "parentUuid": "14d0b46b_44855a25",
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2422c087_ae99e623",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 271,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-07T04:08:38Z",
      "side": 1,
      "message": "I take it back - we should set it only for the WinSDK build.  Mainly because I couldn\u0027t find any documentation on what this does :(  Also a comment in https://reviews.llvm.org/D62111 seems to indicate it is ignored in non-windows builds.\n\n(Ok to do as a follow up.)",
      "parentUuid": "8c1456c6_c53cec5e",
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6074047e_0e68921f",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 271,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-07T04:27:51Z",
      "side": 1,
      "message": "Done. Now only MSVCConfig sets the linker.",
      "parentUuid": "2422c087_ae99e623",
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cbe979b_1b5d09ad",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 470,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T06:05:08Z",
      "side": 1,
      "message": "I\u0027m not sure why this is necessary.  Are there multiple libraries now or is the extension variable?  Either way, add a comment.",
      "range": {
        "startLine": 470,
        "startChar": 8,
        "endLine": 470,
        "endChar": 59
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3a1db2d_e9f52bf5",
        "filename": "base_builders.py",
        "patchSetId": 21
      },
      "lineNbr": 470,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8cbe979b_1b5d09ad",
      "range": {
        "startLine": 470,
        "startChar": 8,
        "endLine": 470,
        "endChar": 59
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9422ef4b_771d5266",
        "filename": "builders.py",
        "patchSetId": 21
      },
      "lineNbr": 645,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T06:05:08Z",
      "side": 1,
      "message": "Omitting this for MSVC is fine since it\u0027s on by default.  nxcompat and dynamicbase are also on by default.  Should we move them here as well?",
      "range": {
        "startLine": 645,
        "startChar": 0,
        "endLine": 645,
        "endChar": 51
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40aa24a8_1d152d53",
        "filename": "builders.py",
        "patchSetId": 21
      },
      "lineNbr": 645,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Did this because lld-link don\u0027t understand the flag. Found the right flag now.",
      "parentUuid": "9422ef4b_771d5266",
      "range": {
        "startLine": 645,
        "startChar": 0,
        "endLine": 645,
        "endChar": 51
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e53c61d0_5c92b467",
        "filename": "builders.py",
        "patchSetId": 21
      },
      "lineNbr": 646,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T06:05:08Z",
      "side": 1,
      "message": "We should pass this to MSVC as well.  This flag makes the links reproducible.",
      "range": {
        "startLine": 646,
        "startChar": 34,
        "endLine": 646,
        "endChar": 47
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a578ab24_b8e2c68b",
        "filename": "builders.py",
        "patchSetId": 21
      },
      "lineNbr": 646,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e53c61d0_5c92b467",
      "range": {
        "startLine": 646,
        "startChar": 34,
        "endLine": 646,
        "endChar": 47
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66f8a4a3_815cf57a",
        "filename": "configs.py",
        "patchSetId": 21
      },
      "lineNbr": 219,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T16:58:00Z",
      "side": 1,
      "message": "Setting -fuse-ld\u003d here caused me to ask about setting CMAKE_LINKER in my other comment.  Is this unnecessary here?",
      "range": {
        "startLine": 219,
        "startChar": 12,
        "endLine": 219,
        "endChar": 27
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecc0c946_fd42abfb",
        "filename": "configs.py",
        "patchSetId": 21
      },
      "lineNbr": 219,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Yes it is. Or config will fail because link.exe is not found.",
      "parentUuid": "66f8a4a3_815cf57a",
      "range": {
        "startLine": 219,
        "startChar": 12,
        "endLine": 219,
        "endChar": 27
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dafe271d_cc714d9c",
        "filename": "configs.py",
        "patchSetId": 21
      },
      "lineNbr": 219,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-07T04:08:38Z",
      "side": 1,
      "message": "This\u0027d make \u0027-fuse-ld\u003dlld\u0027 to every compile step :(  I wish it was clear why CMake uses link.exe instead of the compiler to pick the linker.  Until then, this is fine.",
      "parentUuid": "ecc0c946_fd42abfb",
      "range": {
        "startLine": 219,
        "startChar": 12,
        "endLine": 219,
        "endChar": 27
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a01f9d4_9efab229",
        "filename": "do_build.py",
        "patchSetId": 21
      },
      "lineNbr": 849,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T16:58:00Z",
      "side": 1,
      "message": "This would omit libc++ from the Linux toolchain as well, if win_sdk.is_enabled().\n\nUse \u0027not (host.is_windows and win_sdk.is_enabled())\u0027?",
      "range": {
        "startLine": 849,
        "startChar": 7,
        "endLine": 849,
        "endChar": 31
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba63dfe7_72b2a127",
        "filename": "do_build.py",
        "patchSetId": 21
      },
      "lineNbr": 849,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a01f9d4_9efab229",
      "range": {
        "startLine": 849,
        "startChar": 7,
        "endLine": 849,
        "endChar": 31
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3677b0ee_5b16036c",
        "filename": "win_sdk.py",
        "patchSetId": 21
      },
      "lineNbr": 66,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T16:58:00Z",
      "side": 1,
      "message": "Why not call \u0027prepare()\u0027 here?  would eliminate the need for the \u0027PREPARED\u0027 global.",
      "range": {
        "startLine": 66,
        "startChar": 4,
        "endLine": 66,
        "endChar": 21
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afe83e50_97500409",
        "filename": "win_sdk.py",
        "patchSetId": 21
      },
      "lineNbr": 66,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Makes sense. Thanks.",
      "parentUuid": "3677b0ee_5b16036c",
      "range": {
        "startLine": 66,
        "startChar": 4,
        "endLine": 66,
        "endChar": 21
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d3ac29d_b6c392c0",
        "filename": "win_sdk.py",
        "patchSetId": 21
      },
      "lineNbr": 71,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T16:58:00Z",
      "side": 1,
      "message": "Do we need \u0027global\u0027 if we\u0027re only reading the variable?",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 24
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd1c6916_640d9672",
        "filename": "win_sdk.py",
        "patchSetId": 21
      },
      "lineNbr": 71,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d3ac29d_b6c392c0",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 24
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40edb9bb_c7c59fcc",
        "filename": "win_sdk.py",
        "patchSetId": 21
      },
      "lineNbr": 78,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-08-04T16:58:00Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 78,
        "startChar": 4,
        "endLine": 78,
        "endChar": 24
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24686058_45f462c6",
        "filename": "win_sdk.py",
        "patchSetId": 21
      },
      "lineNbr": 78,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-08-05T08:06:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40edb9bb_c7c59fcc",
      "range": {
        "startLine": 78,
        "startChar": 4,
        "endLine": 78,
        "endChar": 24
      },
      "revId": "c72dc6799319ffd976d97e4e69aad6d3798a7bb8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}