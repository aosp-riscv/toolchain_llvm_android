{
  "comments": [
    {
      "key": {
        "uuid": "03a30b51_e14e776b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-03-18T23:33:13Z",
      "side": 1,
      "message": "Before finally submitting this, please add a slightly longer description of the change.  This is not a little refactoring ðŸ˜Š",
      "range": {
        "startLine": 7,
        "startChar": 24,
        "endLine": 7,
        "endChar": 30
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ad39133_abfb14dd",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-03-19T00:34:24Z",
      "side": 1,
      "message": "*Builder classes use class variables instead of instance variables. But we may create multiple builder instances, right? So why take the risk using class variables which are shared by all instances?\n\nAnd some class variables are initialized, some are not. It is not clear which are const, which are necessary to be filled by child class and which are optional.",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 8
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0eb503fa_ad9d2b4d",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T03:50:56Z",
      "side": 1,
      "message": "str is immutable. It is safe to share unless someone explicitly modify it through class. (See below)\n\nAnd for this design, I would say *all* class variables are constant. I don\u0027t want to use instance variables because that requires a lot of boilerplate in constructors.\n\nMore on that, most of Builder subclasses will only be instantized once. The final goal is somehow like what you may see in Android.bp:\n\nclass Stage2Builder(LLVMBuilder):\n    name \u003d \u0027stage2\u0027\n    property1 \u003d 123\n    property2 \u003d 456\n    ...\n    deps \u003d [\u0027stage1\u0027, ...]\n\n(It doesn\u0027t mean I\u0027ll implement exactly like this. It is just the hope...)\n\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nClass variable and mutability:\n\n\u003e\u003e\u003e class A:\n...   a \u003d \u0027aaa\u0027\n...\n\u003e\u003e\u003e a \u003d A()\n\u003e\u003e\u003e b \u003d A()\n\u003e\u003e\u003e a.a\n\u0027aaa\u0027\n\u003e\u003e\u003e b.a\n\u0027aaa\u0027\n\u003e\u003e\u003e a.a \u003d \u0027bbb\u0027\n\u003e\u003e\u003e a.a\n\u0027bbb\u0027\n\u003e\u003e\u003e b.a\n\u0027aaa\u0027\n\u003e\u003e\u003e A.a \u003d \u0027ccc\u0027\n\u003e\u003e\u003e a.a\n\u0027bbb\u0027\n\u003e\u003e\u003e b.a\n\u0027ccc\u0027\n\u003e\u003e\u003e",
      "parentUuid": "1ad39133_abfb14dd",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 8
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d35ff5ea_95087650",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-03-19T18:44:20Z",
      "side": 1,
      "message": "I see, it\u0027s an interesting way of designing classes. Do you mind adding comments describing the design and how we should use it?\n\nI also want to confirm which fields are necessary, and which fields are optional. In my understanding:\n1) If we give a default value to variable, child class is optional to change it.\n2) If we only give type but not default value, child class or class instance must assign a value to it. otherwise abort if that variable is used.\n\nFor not implemented property get function, why not replace it with typed variable without default value, like changing:\n\n    @property\n    def llvm_projects(self) -\u003e List[str]:\n        \"\"\"The LLVM projects to build.\"\"\"\n        raise NotImplementedError\n\ninto:\n  llvm_projects: List[str]\n\nThey have the same effect (abort when used without child implementation). and child class has a freedom to implement it using a variable assignment or a property function.",
      "parentUuid": "0eb503fa_ad9d2b4d",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 8
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "125480b6_57f1fd7f",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T19:29:08Z",
      "side": 1,
      "message": "Yes are these two problems I\u0027m not quite sure about. Suggestions are welcome.\n\n1. For the properties child classes have to set, how do we enforce it?\n\na) Current way: \"define\" it but don\u0027t initialize it. The definition actually does nothing. So when the field is used, an AttributeError will be raised \u0027X\u0027 object has no attribute \u0027y\u0027.\n\nb) Maybe have a validate() function everywhere and have the framework invoke them in the future? That requires more work everywhere.\n\nc) Refactor everything into a @property method. This is verbose then just set a variable.\n\n\n2. What should be a variable, and what should be @property method.\n\nI always prefer plaint variable because it is easier to override in subclasses. The thing is that sometimes child class need some \"logic\" to decide it. E.g. stage1 will build ANDROID_TARGETS if debug else BASE_TARGETS. The decision may based on runtime information (like args.debug) so that class level initializer or @staticmethod won\u0027t work.",
      "parentUuid": "d35ff5ea_95087650",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 8
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be034f98_677ff5f4",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T19:34:09Z",
      "side": 1,
      "message": "For problem 1, surely constructor is also the standard way to go.",
      "parentUuid": "125480b6_57f1fd7f",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 8
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41a2474b_aabf792d",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 33,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-03-19T20:36:54Z",
      "side": 1,
      "message": "For problem 1, I think current way in a) is good enough, and b) and c) are extra work with no obvious benefit.\nFor problem 2, I agree with you. And to save some code, I also think NotImplemented property function can be replaced by variable with only definition.",
      "parentUuid": "be034f98_677ff5f4",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 8
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e7862a8_8d5298f0",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-03-19T00:34:24Z",
      "side": 1,
      "message": "why build is a property?",
      "range": {
        "startLine": 35,
        "startChar": 5,
        "endLine": 35,
        "endChar": 13
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dad838fa_d7322b15",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 35,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T03:50:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e7862a8_8d5298f0",
      "range": {
        "startLine": 35,
        "startChar": 5,
        "endLine": 35,
        "endChar": 13
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d8dbe8_7fb7c187",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 129,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-03-18T23:33:13Z",
      "side": 1,
      "message": "We should set an svn_revision property here instead of keeping track of build_llvm_next.",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 129,
        "endChar": 25
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c249e8c_1fe9cb45",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 129,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T03:50:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16d8dbe8_7fb7c187",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 129,
        "endChar": 25
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4e499a6_9e2aed87",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 174,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-03-19T00:34:24Z",
      "side": 1,
      "message": "I know we only run on linux/darwin, but why not to be safe and always use os.path.join()?",
      "range": {
        "startLine": 174,
        "startChar": 42,
        "endLine": 174,
        "endChar": 46
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79946082_1f6e5973",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 174,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T03:50:56Z",
      "side": 1,
      "message": "This is using pathlib.Path. It overrides \u0027/\u0027 operator to be os.path.join().",
      "parentUuid": "a4e499a6_9e2aed87",
      "range": {
        "startLine": 174,
        "startChar": 42,
        "endLine": 174,
        "endChar": 46
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2f787f1_9a955c7c",
        "filename": "builders.py",
        "patchSetId": 9
      },
      "lineNbr": 174,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2020-03-19T18:44:20Z",
      "side": 1,
      "message": "I see. Sorry for not realizing it.",
      "parentUuid": "79946082_1f6e5973",
      "range": {
        "startLine": 174,
        "startChar": 42,
        "endLine": 174,
        "endChar": 46
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "575e9bbe_cdea7075",
        "filename": "do_build.py",
        "patchSetId": 9
      },
      "lineNbr": 1208,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-03-18T23:33:13Z",
      "side": 1,
      "message": "It seems awkward to me that we need to aware to extend the base class\u0027s cmake_defines.  Is there a better way to compose this?\n\n(Unless there are alternatives, I\u0027m going to accept this idiom, so marking this comment as resolved).",
      "range": {
        "startLine": 1208,
        "startChar": 0,
        "endLine": 1208,
        "endChar": 39
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a764dd2_98e3556a",
        "filename": "do_build.py",
        "patchSetId": 9
      },
      "lineNbr": 1208,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T03:50:56Z",
      "side": 1,
      "message": "Thought about some alternatives but none of them is better:\n1. Each level defines different methods. And parent calls child\u0027s method.\n2. Have a common dict for all defines. Every level appends to the dict. But we still need a trigger method and most likely we still need super() in that method..",
      "parentUuid": "575e9bbe_cdea7075",
      "range": {
        "startLine": 1208,
        "startChar": 0,
        "endLine": 1208,
        "endChar": 39
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c95ca96_22bc037b",
        "filename": "toolchains.py",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-03-18T23:33:13Z",
      "side": 1,
      "message": "The Toolchain hierarchy is very useful.  It needs a slight tweak though because we have two different purposes for it:\n1. ClangToolchain \u003c- to represent a clang-rXYZ prebuilt or a stage1 or stage2 toolchain.\n\n2. Another class to represent a target being built.  This should handle the GCC sysroots, target triples etc.  This class would get used for both the host and device (for building runtimes).  This class can be called TargetConfiguration or something similar.  We can have further subclasses {Android,Darwin,Linux,Windows}Configuration.\n\n(1) should have methods like cc() and cxx() below.\n(2) should have the compiler and linker flags.\n\nWe should start with just the LinuxConfiguration and DarwinConfiguration for this CL.",
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d6d6fbb_f673c346",
        "filename": "toolchains.py",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T03:50:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c95ca96_22bc037b",
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d67d11bf_a8b8cf76",
        "filename": "toolchains.py",
        "patchSetId": 9
      },
      "lineNbr": 143,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-03-18T23:33:13Z",
      "side": 1,
      "message": "This should only be needed for stage1 right?  This makes me wonder if the LLVMBuilder instances also need to be able to configure cflags/ldflags.",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 143,
        "endChar": 37
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3557a3e_b2e91190",
        "filename": "toolchains.py",
        "patchSetId": 9
      },
      "lineNbr": 143,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T03:50:56Z",
      "side": 1,
      "message": "Yes specially when we move ldflags to Config class.",
      "parentUuid": "d67d11bf_a8b8cf76",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 143,
        "endChar": 37
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b493e8f_8c9be977",
        "filename": "utils.py",
        "patchSetId": 9
      },
      "lineNbr": 86,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-03-18T23:33:13Z",
      "side": 1,
      "message": "I don\u0027t see the utility in logging the invocation time for a command.  Is there any particular motivation?  If we want to find the time taken for a command, we should log that more explicitly.",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 86,
        "endChar": 63
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "237d699b_219cb4ee",
        "filename": "utils.py",
        "patchSetId": 9
      },
      "lineNbr": 86,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-03-19T03:50:56Z",
      "side": 1,
      "message": "No I just move this from do_build.py here. Because I need it in builders.py...",
      "parentUuid": "3b493e8f_8c9be977",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 86,
        "endChar": 63
      },
      "revId": "6045e2448d95f73164ac341bafef0008b482d096",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}