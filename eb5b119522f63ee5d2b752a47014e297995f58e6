{
  "comments": [
    {
      "key": {
        "uuid": "beec2490_21ce99e8",
        "filename": "configs.py",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-06-04T22:45:03Z",
      "side": 1,
      "message": "This was added in https://r.android.com/1090811 for https://reviews.llvm.org/D65245.  While the underlying gcov workaround is not needed anymore (since we moved to clang coverage), using 10000 seems to be the right value to pass here, unless there\u0027s a better reason to use 29.",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f50b6a1_aa695a01",
        "filename": "configs.py",
        "patchSetId": 1
      },
      "lineNbr": 236,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-06-04T22:45:03Z",
      "side": 1,
      "message": "Should we still pass \u0027-nostdinc++\u0027 for the NDK?",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14483c36_8dc4c8c5",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 508,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-06-04T22:45:03Z",
      "side": 1,
      "message": "Can you raise an exception if either of the libraries is not found?  We could then get rid of these steps/checks when no longer neecssary.\n\nThe same for the NDK STL libraries below even though they are going to be permanent.  But we could detect if the NDK installation is restructured.",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60a7e55d_41befd4e",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 508,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-06-12T04:22:10Z",
      "side": 1,
      "message": "yeah, I\u0027ll see if if I can do that",
      "parentUuid": "14483c36_8dc4c8c5",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec888a6a_0e727a1b",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 532,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-06-04T22:45:03Z",
      "side": 1,
      "message": "If this is no longer necessary for r22 and below, can you raise an exception here if paths.NDK_BASE is r22 or greater?  We could remove these hacks during that switch.",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df368a51_d30ea993",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 532,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-06-04T22:46:52Z",
      "side": 1,
      "message": "\u003e no longer necessary for r22 and below\nI meant \"no longer necessary for r22 and above\"",
      "parentUuid": "ec888a6a_0e727a1b",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed551729_8bfd5f3e",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 532,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-06-12T04:22:10Z",
      "side": 1,
      "message": "yeah, that sounds reasonable",
      "parentUuid": "df368a51_d30ea993",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "492685c2_3e5bb51e",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 791,
      "author": {
        "id": 1307957
      },
      "writtenOn": "2020-06-04T18:23:17Z",
      "side": 1,
      "message": "If this is necessary, maybe move it to CMakeBuilder?",
      "range": {
        "startLine": 791,
        "startChar": 17,
        "endLine": 791,
        "endChar": 48
      },
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80cfd024_b13b83d2",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 841,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-06-04T22:45:03Z",
      "side": 1,
      "message": "Why is this necessary?",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c83a2ce_9afab7f0",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 841,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-06-12T04:22:10Z",
      "side": 1,
      "message": "It seems that libomp calls some functions from the builtins library, where the libclang_rt.builtins versions of those builtins depend on libm functions (whereas libgcc did not need libm).\n\nOn arm32, there are unresolved references while attempting to link libomp.so. They involve complex-FP math:\n\n - __divsc3 builtin calls fmaxf and scalbnf.\n - __divdc3 builtin calls fmax and scalbn.\n\nThe code in compiler-rt/lib/builtins doesn\u0027t directly call the libm functions. Instead, it calls crt_{fmax,scalbn}[f] functions, which are macros for __builtin_fmax[f] or __builtin_scalbn[f]. Clang turns the __builtin_*  calls into calls to the libm functions.\n\nThe dependency on libm did seem odd to me. Depending on target and optimization level, Clang sometimes inlines the __builtin_fmax[f] call. AFAICT, it doesn\u0027t ever inline the __builtin_scalbn[f] call. I think scalbn[f] more-or-less just increments the exponent field of the FP value, so maybe it could be inlined into the builtins archive.\n\nThe functions are defined in int_math.h. Maybe the libm dependency is unintended?\n\n    // This file defines substitutes for the libm functions used in some of the\n    // compiler-rt implementations, defined in such a way that there is not a direct\n    // dependency on libm or math.h. Instead, we use the compiler builtin versions\n    // where available. This reduces our dependencies on the system SDK by foisting\n    // the responsibility onto the compiler.\n\nI also see a call from __divsc3 to __compiler_rt_logbf, which calls __compiler_rt_logbX:\n\n    // Implements logb methods (logb, logbf, logbl) for IEEE-754. This avoids\n    // pulling in a libm dependency from compiler-rt, but is not meant to replace\n    // it (i.e. code calling logb() should get the one from libm, not this), hence\n    // the __compiler_rt prefix.\n    static __inline fp_t __compiler_rt_logbX(fp_t x) {\n\nI know of two places where the builtins library depends on libc, and both are marginal:\n\n - __compilerrt_abort_impl calls abort, but it\u0027s very target-specific. e.g. Fuchsia replaces the abort call with __builtin_trap.\n\n - __eprintf references fprintf, fflush, and stderr. The comments say it was used to implement assert once upon a time, but I don\u0027t know if that has ever been relevant to Android.",
      "parentUuid": "80cfd024_b13b83d2",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08757480_c39cd799",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 841,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-06-12T05:11:20Z",
      "side": 1,
      "message": "I see some patches adding -lm to provide the libm functions that compiler-rt/libomp need, but there has also been work done in compiler-rt to remove the libm dependency.\n\nFrom https://reviews.llvm.org/D49514, the calls to fmax and scalbn were left in, with the rationale that they\u0027re provided by libc rather than libm. AFAICT, x86_64 glibc\u0027s libc provides scalbn but not fmax. (I checked both libc.so.6 and libc_nonshared.a.) For Bionic, neither function is in libc. I also looked at FreeBSD 12 x86_64, and its libc also has neither function.\n\nMaybe it\u0027s not too hard to write compiler-rt versions of these functions.",
      "parentUuid": "8c83a2ce_9afab7f0",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62ec7ef8_3780d763",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 841,
      "author": {
        "id": 1229339
      },
      "writtenOn": "2020-06-12T05:48:01Z",
      "side": 1,
      "message": "I verified that fmax*, scanbn*, and logbl are the only libm functions that the builtins use. (The logbl call comes from __divxc3, and I\u0027m guessing it\u0027s an oversight that it doesn\u0027t call __compiler_rt_logbl.)",
      "parentUuid": "08757480_c39cd799",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3206a7be_f7aeaba5",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 1665,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-06-04T22:45:03Z",
      "side": 1,
      "message": "Want to call out that this means debug builds and PGO-instrumented builds would be slower.  With the new steps incrementally installing to the resource dir and subsequent steps depending on them, I don\u0027t have any sane way to speed this up.",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "545b46bb_77e69240",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 1665,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-06-04T22:46:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3206a7be_f7aeaba5",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b5fcd94_d2f4e113",
        "filename": "do_build.py",
        "patchSetId": 1
      },
      "lineNbr": 1665,
      "author": {
        "id": 1058860
      },
      "writtenOn": "2020-06-06T00:15:57Z",
      "side": 1,
      "message": "Scratch that.  We were already using the stage2 toolchain for runtimes (in line 1661 above).  This is just cleanup of dead code.\n\nI agree that we should just use the stage2 toolchain and pay the performance cost on debug and instrumented builds.",
      "parentUuid": "545b46bb_77e69240",
      "revId": "eb5b119522f63ee5d2b752a47014e297995f58e6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}